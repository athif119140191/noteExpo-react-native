{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport CheckBox from '@react-native-community/checkbox';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FontAwesome5 from \"@expo/vector-icons/FontAwesome5\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setTaskID, setTasks } from \"../components/redux/action\";\nimport GlobalStyle from \"../misc/GlobalStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Done(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useSelector = useSelector(function (state) {\n    return state.taskReducer;\n  }),\n      tasks = _useSelector.tasks;\n\n  var dispatch = useDispatch();\n\n  var deleteTask = function deleteTask(id) {\n    var filteredTasks = tasks.filter(function (task) {\n      return task.ID !== id;\n    });\n    AsyncStorage.setItem('Tasks', JSON.stringify(filteredTasks)).then(function () {\n      dispatch(setTasks(filteredTasks));\n      Alert.alert('Success!', 'Task removed successfully.');\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  var checkTask = function checkTask(id, newValue) {\n    var index = tasks.findIndex(function (task) {\n      return task.ID === id;\n    });\n\n    if (index > -1) {\n      var newTasks = _toConsumableArray(tasks);\n\n      newTasks[index].Done = newValue;\n      AsyncStorage.setItem('Tasks', JSON.stringify(newTasks)).then(function () {\n        dispatch(setTasks(newTasks));\n        Alert.alert('Success!', 'Task state is changed.');\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  };\n\n  return _jsx(View, {\n    style: styles.body,\n    children: _jsx(FlatList, {\n      data: tasks.filter(function (task) {\n        return task.Done === true;\n      }),\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          style: styles.item,\n          onPress: function onPress() {\n            dispatch(setTaskID(item.ID));\n            navigation.navigate('Task');\n          },\n          children: _jsxs(View, {\n            style: styles.item_row,\n            children: [_jsx(CheckBox, {\n              value: item.Done,\n              onValueChange: function onValueChange(newValue) {\n                checkTask(item.ID, newValue);\n              }\n            }), _jsxs(View, {\n              style: styles.item_body,\n              children: [_jsx(Text, {\n                style: [GlobalStyle.CustomFontHW, styles.title],\n                numberOfLines: 1,\n                children: item.Title\n              }), _jsx(Text, {\n                style: [GlobalStyle.CustomFontHW, styles.subtitle],\n                numberOfLines: 1,\n                children: item.Desc\n              })]\n            }), _jsx(TouchableOpacity, {\n              style: styles.delete,\n              onPress: function onPress() {\n                deleteTask(item.ID);\n              },\n              children: _jsx(FontAwesome5, {\n                name: 'trash',\n                size: 25,\n                color: '#ff3636'\n              })\n            })]\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  body: {\n    flex: 1\n  },\n  item_row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  item_body: {\n    flex: 1\n  },\n  delete: {\n    width: 50,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  item: {\n    marginHorizontal: 10,\n    marginVertical: 7,\n    paddingHorizontal: 10,\n    backgroundColor: '#ffffff',\n    justifyContent: 'center',\n    borderRadius: 10,\n    elevation: 5\n  },\n  title: {\n    color: '#000000',\n    fontSize: 30,\n    margin: 5\n  },\n  subtitle: {\n    color: '#999999',\n    fontSize: 20,\n    margin: 5\n  }\n});","map":{"version":3,"sources":["D:/ALPro/Smt 6/PAM/noteExpo/app/screens/Done.js"],"names":["AsyncStorage","CheckBox","React","FontAwesome5","useDispatch","useSelector","setTaskID","setTasks","GlobalStyle","Done","navigation","state","taskReducer","tasks","dispatch","deleteTask","id","filteredTasks","filter","task","ID","setItem","JSON","stringify","then","Alert","alert","catch","err","console","log","checkTask","newValue","index","findIndex","newTasks","styles","body","item","navigate","item_row","item_body","CustomFontHW","title","Title","subtitle","Desc","delete","toString","StyleSheet","create","flex","flexDirection","alignItems","width","height","justifyContent","marginHorizontal","marginVertical","paddingHorizontal","backgroundColor","borderRadius","elevation","color","fontSize","margin"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport CheckBox from '@react-native-community/checkbox';\r\nimport React from 'react'\r\nimport { StyleSheet, Text, TouchableOpacity, View, FlatList, Alert } from 'react-native'\r\nimport FontAwesome5 from 'react-native-vector-icons/FontAwesome5';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setTaskID, setTasks } from '../components/redux/action';\r\nimport GlobalStyle from '../misc/GlobalStyle';\r\n\r\nexport default function Done({ navigation }) {\r\n\r\n    const { tasks } = useSelector(state => state.taskReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteTask = (id) => {\r\n        const filteredTasks = tasks.filter(task => task.ID !== id);\r\n        AsyncStorage.setItem('Tasks', JSON.stringify(filteredTasks))\r\n            .then(() => {\r\n                dispatch(setTasks(filteredTasks));\r\n                Alert.alert('Success!', 'Task removed successfully.');\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const checkTask = (id, newValue) => {\r\n        const index = tasks.findIndex(task => task.ID === id);\r\n        if (index > -1) {\r\n            let newTasks = [...tasks];\r\n            newTasks[index].Done = newValue;\r\n            AsyncStorage.setItem('Tasks', JSON.stringify(newTasks))\r\n                .then(() => {\r\n                    dispatch(setTasks(newTasks));\r\n                    Alert.alert('Success!', 'Task state is changed.');\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.body}>\r\n            <FlatList\r\n                data={tasks.filter(task => task.Done === true)}\r\n                renderItem={({ item }) => (\r\n                    <TouchableOpacity\r\n                        style={styles.item}\r\n                        onPress={() => {\r\n                            dispatch(setTaskID(item.ID));\r\n                            navigation.navigate('Task');\r\n                        }}\r\n                    >\r\n                        <View style={styles.item_row}>\r\n                            <CheckBox\r\n                                value={item.Done}\r\n                                onValueChange={(newValue) => { checkTask(item.ID, newValue) }}\r\n                            />\r\n                            <View style={styles.item_body}>\r\n                                <Text\r\n                                    style={[\r\n                                        GlobalStyle.CustomFontHW,\r\n                                        styles.title\r\n                                    ]}\r\n                                    numberOfLines={1}\r\n                                >\r\n                                    {item.Title}\r\n                                </Text>\r\n                                <Text\r\n                                    style={[\r\n                                        GlobalStyle.CustomFontHW,\r\n                                        styles.subtitle\r\n                                    ]}\r\n                                    numberOfLines={1}\r\n                                >\r\n                                    {item.Desc}\r\n                                </Text>\r\n                            </View>\r\n                            <TouchableOpacity\r\n                                style={styles.delete}\r\n                                onPress={() => { deleteTask(item.ID) }}\r\n                            >\r\n                                <FontAwesome5\r\n                                    name={'trash'}\r\n                                    size={25}\r\n                                    color={'#ff3636'}\r\n                                />\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                )}\r\n                keyExtractor={(item, index) => index.toString()}\r\n            />\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    body: {\r\n        flex: 1\r\n    },\r\n    item_row: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    item_body: {\r\n        flex: 1,\r\n    },\r\n    delete: {\r\n        width: 50,\r\n        height: 50,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    item: {\r\n        marginHorizontal: 10,\r\n        marginVertical: 7,\r\n        paddingHorizontal: 10,\r\n        backgroundColor: '#ffffff',\r\n        justifyContent: 'center',\r\n        borderRadius: 10,\r\n        elevation: 5,\r\n    },\r\n    title: {\r\n        color: '#000000',\r\n        fontSize: 30,\r\n        margin: 5,\r\n    },\r\n    subtitle: {\r\n        color: '#999999',\r\n        fontSize: 20,\r\n        margin: 5,\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}