{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport Intro from \"./app/screens/Intro\";\nimport NoteScreen from \"./app/screens/NoteScreen\";\nimport ToDo from \"./app/screens/ToDo\";\nimport Done from \"./app/screens/Done\";\nimport Task from \"./app/screens/Task\";\nimport Map from \"./app/screens/Map\";\nimport Camera from \"./app/screens/Camera\";\nimport NoteDetail from \"./app/components/NoteDetail\";\nimport NoteProvider from \"./app/contexts/NoteProvider\";\nimport { Provider } from 'react-redux';\nimport { Store } from \"./app/components/redux/store\";\nimport colors from \"../misc/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createMaterialTopTabNavigator();\nvar Tabs = createBottomTabNavigator();\nvar Stack = createStackNavigator();\nexport default function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAppFirstTimeOpen = _useState4[0],\n      setIsAppFirstTimeOpen = _useState4[1];\n\n  var findUser = function findUser() {\n    var result;\n    return _regeneratorRuntime.async(function findUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result === null)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setIsAppFirstTimeOpen(true));\n\n          case 5:\n            setUser(JSON.parse(result));\n            setIsAppFirstTimeOpen(false);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    findUser();\n  }, []);\n\n  var LoadNoteScreen = function LoadNoteScreen(props) {\n    return _jsx(NoteScreen, _objectSpread(_objectSpread({}, props), {}, {\n      user: user\n    }));\n  };\n\n  var LoadToDo = function LoadToDo(props) {\n    return _jsx(ToDo, _objectSpread(_objectSpread({}, props), {}, {\n      user: user\n    }));\n  };\n\n  if (isAppFirstTimeOpen) return _jsx(Intro, {\n    onFinish: findUser\n  });\n\n  var TodoApp = function TodoApp() {\n    return _jsxs(Tabs.Navigator, {\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused,\n                size = _ref2.size,\n                color = _ref2.color;\n            var iconName;\n\n            if (route.name === 'To-Do') {\n              iconName = 'clipboard-list';\n              size = focused ? 25 : 20;\n            } else if (route.name === 'Done') {\n              iconName = 'clipboard-check';\n              size = focused ? 25 : 20;\n            }\n\n            return _jsx(FontAwesome5, {\n              name: iconName,\n              size: size,\n              color: color\n            });\n          }\n        };\n      },\n      tabBarOptions: {\n        activeTintColor: colors.PRIMARY,\n        inactiveTintColor: '#777777',\n        labelStyle: {\n          fontSize: 15,\n          fontWeight: 'bold'\n        }\n      },\n      children: [_jsx(Tabs.Screen, {\n        component: LoadToDo,\n        name: \"To-Do\"\n      }), _jsx(Tabs.Screen, {\n        component: Done,\n        name: \"Done\"\n      })]\n    });\n  };\n\n  var MainApp = function MainApp() {\n    return _jsxs(Tab.Navigator, {\n      children: [_jsx(Tab.Screen, {\n        component: LoadNoteScreen,\n        name: \"Memo\"\n      }), _jsx(Tab.Screen, {\n        component: TodoApp,\n        name: \"ToDo List\"\n      })]\n    });\n  };\n\n  return _jsx(Provider, {\n    store: Store,\n    children: _jsx(NavigationContainer, {\n      children: _jsx(NoteProvider, {\n        children: _jsxs(Stack.Navigator, {\n          screenOptions: {\n            headerTitle: '',\n            headerTransparent: true\n          },\n          children: [_jsx(Stack.Screen, {\n            name: \"MainApp\",\n            component: MainApp,\n            options: {\n              headerShown: false\n            }\n          }), _jsx(Stack.Screen, {\n            component: NoteDetail,\n            name: \"NoteDetail\"\n          }), _jsx(Stack.Screen, {\n            component: Task,\n            name: \"Task\"\n          }), _jsx(Stack.Screen, {\n            component: Camera,\n            name: \"Camera\"\n          })]\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["D:/ALPro/Smt 6/PAM/noteExpo/App.js"],"names":["AsyncStorage","StatusBar","React","useEffect","useState","createStackNavigator","createBottomTabNavigator","NavigationContainer","createMaterialTopTabNavigator","Intro","NoteScreen","ToDo","Done","Task","Map","Camera","NoteDetail","NoteProvider","Provider","Store","colors","Tab","Tabs","Stack","App","user","setUser","isAppFirstTimeOpen","setIsAppFirstTimeOpen","findUser","getItem","result","JSON","parse","LoadNoteScreen","props","LoadToDo","TodoApp","route","tabBarIcon","focused","size","color","iconName","name","activeTintColor","PRIMARY","inactiveTintColor","labelStyle","fontSize","fontWeight","MainApp","headerTitle","headerTransparent","headerShown","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport Intro from './app/screens/Intro';\nimport NoteScreen from './app/screens/NoteScreen';\nimport ToDo from './app/screens/ToDo';\nimport Done from './app/screens/Done';\nimport Task from './app/screens/Task';\nimport Map from './app/screens/Map';\nimport Camera from './app/screens/Camera';\nimport NoteDetail from './app/components/NoteDetail';\nimport NoteProvider from './app/contexts/NoteProvider';\nimport { Provider } from 'react-redux';\nimport { Store } from './app/components/redux/store';\nimport colors from '../misc/colors';\n\nconst Tab = createMaterialTopTabNavigator();\nconst Tabs = createBottomTabNavigator();\nconst Stack = createStackNavigator();\nexport default function App() {\n  const [user, setUser] = useState({});\n  const [isAppFirstTimeOpen, setIsAppFirstTimeOpen] = useState(false);\n  const findUser = async () => {\n    const result = await AsyncStorage.getItem('user');\n\n    if (result === null) return setIsAppFirstTimeOpen(true);\n\n    setUser(JSON.parse(result));\n    setIsAppFirstTimeOpen(false);\n  };\n\n  useEffect(() => {\n    findUser();\n  }, []);\n\n  const LoadNoteScreen = props => <NoteScreen {...props} user={user} />;\n  const LoadToDo = props => <ToDo {...props} user={user} />;\n\n  if (isAppFirstTimeOpen) return <Intro onFinish={findUser} />;\n\n  const TodoApp = () => {\n    return (\n      <Tabs.Navigator\n        screenOptions={\n          ({ route }) => ({\n            tabBarIcon: ({ focused, size, color }) => {\n              let iconName;\n              if (route.name === 'To-Do') {\n                iconName = 'clipboard-list';\n                size = focused ? 25 : 20;\n              } else if (route.name === 'Done') {\n                iconName = 'clipboard-check';\n                size = focused ? 25 : 20;\n              }\n              return (\n                <FontAwesome5\n                  name={iconName}\n                  size={size}\n                  color={color}\n                />\n              );\n            }\n          })\n        }\n        tabBarOptions={{\n          activeTintColor: colors.PRIMARY,\n          inactiveTintColor: '#777777',\n          labelStyle: { fontSize: 15, fontWeight: 'bold' }\n        }}\n      >\n        <Tabs.Screen component={LoadToDo} name='To-Do' />\n        <Tabs.Screen component={Done} name='Done' />\n      </Tabs.Navigator>\n    );\n  }\n\n  const MainApp = () => {\n    return (\n      <Tab.Navigator>\n        <Tab.Screen component={LoadNoteScreen} name='Memo' />\n        <Tab.Screen component={TodoApp} name='ToDo List' />\n      </Tab.Navigator>\n    );\n  };\n\n  return (\n    <Provider store={Store}>\n      <NavigationContainer>\n        <NoteProvider>\n          <Stack.Navigator\n            screenOptions={{ headerTitle: '', headerTransparent: true }}\n          >\n\n            <Stack.Screen name=\"MainApp\" component={MainApp} options={{ headerShown: false }} />\n            <Stack.Screen component={NoteDetail} name='NoteDetail' />\n            <Stack.Screen component={Task} name='Task' />\n            <Stack.Screen component={Camera} name='Camera' />\n          </Stack.Navigator>\n        </NoteProvider>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}