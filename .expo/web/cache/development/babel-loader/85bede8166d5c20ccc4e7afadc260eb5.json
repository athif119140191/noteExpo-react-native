{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport CheckBox from '@react-native-community/checkbox';\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FontAwesome5 from \"@expo/vector-icons/FontAwesome5\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setTaskID, setTasks } from \"../components/redux/action\";\nimport GlobalStyle from \"../misc/GlobalStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ToDo(_ref) {\n  var user = _ref.user,\n      navigation = _ref.navigation;\n\n  var _useSelector = useSelector(function (state) {\n    return state.taskReducer;\n  }),\n      tasks = _useSelector.tasks;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    getTasks();\n  }, []);\n\n  var getTasks = function getTasks() {\n    AsyncStorage.getItem('Tasks').then(function (tasks) {\n      var parsedTasks = JSON.parse(tasks);\n\n      if (parsedTasks && typeof parsedTasks === 'object') {\n        dispatch(setTasks(parsedTasks));\n      }\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  var deleteTask = function deleteTask(id) {\n    var filteredTasks = tasks.filter(function (task) {\n      return task.ID !== id;\n    });\n    AsyncStorage.setItem('Tasks', JSON.stringify(filteredTasks)).then(function () {\n      dispatch(setTasks(filteredTasks));\n      Alert.alert('Success!', 'Task removed successfully.');\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  var checkTask = function checkTask(id, newValue) {\n    var index = tasks.findIndex(function (task) {\n      return task.ID === id;\n    });\n\n    if (index > -1) {\n      var newTasks = _toConsumableArray(tasks);\n\n      newTasks[index].Done = newValue;\n      AsyncStorage.setItem('Tasks', JSON.stringify(newTasks)).then(function () {\n        dispatch(setTasks(newTasks));\n        Alert.alert('Success!', 'Task state is changed.');\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.body,\n    children: [_jsx(Text, {\n      style: styles.header,\n      children: \"Good \" + greet + \" \" + user.name\n    }), _jsx(FlatList, {\n      data: tasks.filter(function (task) {\n        return task.Done === false;\n      }),\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          style: styles.item,\n          onPress: function onPress() {\n            dispatch(setTaskID(item.ID));\n            navigation.navigate('Task');\n          },\n          children: _jsxs(View, {\n            style: styles.item_row,\n            children: [_jsx(View, {\n              style: [{\n                backgroundColor: item.Color === 'red' ? '#f28b82' : item.Color === 'blue' ? '#aecbfa' : item.Color === 'green' ? '#ccff90' : '#ffffff'\n              }, styles.color]\n            }), _jsx(CheckBox, {\n              value: item.Done,\n              onValueChange: function onValueChange(newValue) {\n                checkTask(item.ID, newValue);\n              }\n            }), _jsxs(View, {\n              style: styles.item_body,\n              children: [_jsx(Text, {\n                style: [GlobalStyle.CustomFontHW, styles.title],\n                numberOfLines: 1,\n                children: item.Title\n              }), _jsx(Text, {\n                style: [GlobalStyle.CustomFontHW, styles.subtitle],\n                numberOfLines: 1,\n                children: item.Desc\n              })]\n            }), _jsx(TouchableOpacity, {\n              style: styles.delete,\n              onPress: function onPress() {\n                deleteTask(item.ID);\n              },\n              children: _jsx(FontAwesome5, {\n                name: 'trash',\n                size: 25,\n                color: '#ff3636'\n              })\n            })]\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: function onPress() {\n        dispatch(setTaskID(tasks.length + 1));\n        navigation.navigate('Task');\n      },\n      children: _jsx(FontAwesome5, {\n        name: 'plus',\n        size: 20,\n        color: '#ffffff'\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  body: {\n    flex: 1\n  },\n  button: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: '#0080ff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    bottom: 10,\n    right: 10,\n    elevation: 5\n  },\n  item_row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  item_body: {\n    flex: 1\n  },\n  delete: {\n    width: 50,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  item: {\n    marginHorizontal: 10,\n    marginVertical: 7,\n    paddingRight: 10,\n    backgroundColor: '#ffffff',\n    justifyContent: 'center',\n    borderRadius: 10,\n    elevation: 5\n  },\n  title: {\n    color: '#000000',\n    fontSize: 30,\n    margin: 5\n  },\n  subtitle: {\n    color: '#999999',\n    fontSize: 20,\n    margin: 5\n  },\n  color: {\n    width: 20,\n    height: 100,\n    borderTopLeftRadius: 10,\n    borderBottomLeftRadius: 10\n  }\n});","map":{"version":3,"sources":["D:/ALPro/Smt 6/PAM/noteExpo/app/screens/ToDo.js"],"names":["AsyncStorage","CheckBox","React","useEffect","FontAwesome5","useDispatch","useSelector","setTaskID","setTasks","GlobalStyle","ToDo","user","navigation","state","taskReducer","tasks","dispatch","getTasks","getItem","then","parsedTasks","JSON","parse","catch","err","console","log","deleteTask","id","filteredTasks","filter","task","ID","setItem","stringify","Alert","alert","checkTask","newValue","index","findIndex","newTasks","Done","styles","body","header","greet","name","item","navigate","item_row","backgroundColor","Color","color","item_body","CustomFontHW","title","Title","subtitle","Desc","delete","toString","button","length","StyleSheet","create","flex","width","height","borderRadius","justifyContent","alignItems","position","bottom","right","elevation","flexDirection","marginHorizontal","marginVertical","paddingRight","fontSize","margin","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport CheckBox from '@react-native-community/checkbox';\r\nimport React, { useEffect } from 'react'\r\nimport { StyleSheet, Text, TouchableOpacity, View, FlatList, Alert } from 'react-native'\r\nimport FontAwesome5 from 'react-native-vector-icons/FontAwesome5';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setTaskID, setTasks } from '../components/redux/action';\r\nimport GlobalStyle from '../misc/GlobalStyle';\r\n\r\nexport default function ToDo({ user, navigation }) {\r\n\r\n    const { tasks } = useSelector(state => state.taskReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        getTasks();\r\n    }, [])\r\n\r\n    const getTasks = () => {\r\n        AsyncStorage.getItem('Tasks')\r\n            .then(tasks => {\r\n                const parsedTasks = JSON.parse(tasks);\r\n                if (parsedTasks && typeof parsedTasks === 'object') {\r\n                    dispatch(setTasks(parsedTasks));\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const deleteTask = (id) => {\r\n        const filteredTasks = tasks.filter(task => task.ID !== id);\r\n        AsyncStorage.setItem('Tasks', JSON.stringify(filteredTasks))\r\n            .then(() => {\r\n                dispatch(setTasks(filteredTasks));\r\n                Alert.alert('Success!', 'Task removed successfully.');\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const checkTask = (id, newValue) => {\r\n        const index = tasks.findIndex(task => task.ID === id);\r\n        if (index > -1) {\r\n            let newTasks = [...tasks];\r\n            newTasks[index].Done = newValue;\r\n            AsyncStorage.setItem('Tasks', JSON.stringify(newTasks))\r\n                .then(() => {\r\n                    dispatch(setTasks(newTasks));\r\n                    Alert.alert('Success!', 'Task state is changed.');\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.body}>\r\n          <Text style={styles.header}>{`Good ${greet} ${user.name}`}</Text>\r\n            <FlatList\r\n                data={tasks.filter(task => task.Done === false)}\r\n                renderItem={({ item }) => (\r\n                    <TouchableOpacity\r\n                        style={styles.item}\r\n                        onPress={() => {\r\n                            dispatch(setTaskID(item.ID));\r\n                            navigation.navigate('Task');\r\n                        }}\r\n                    >\r\n                        <View style={styles.item_row}>\r\n                            <View\r\n                                style={[\r\n                                    {\r\n                                        backgroundColor:\r\n                                            item.Color === 'red' ? '#f28b82' :\r\n                                                item.Color === 'blue' ? '#aecbfa' :\r\n                                                    item.Color === 'green' ? '#ccff90' : '#ffffff'\r\n                                    },\r\n                                    styles.color]}\r\n                            />\r\n                            <CheckBox\r\n                                value={item.Done}\r\n                                onValueChange={(newValue) => { checkTask(item.ID, newValue) }}\r\n                            />\r\n                            <View style={styles.item_body}>\r\n                                <Text\r\n                                    style={[\r\n                                        GlobalStyle.CustomFontHW,\r\n                                        styles.title\r\n                                    ]}\r\n                                    numberOfLines={1}\r\n                                >\r\n                                    {item.Title}\r\n                                </Text>\r\n                                <Text\r\n                                    style={[\r\n                                        GlobalStyle.CustomFontHW,\r\n                                        styles.subtitle\r\n                                    ]}\r\n                                    numberOfLines={1}\r\n                                >\r\n                                    {item.Desc}\r\n                                </Text>\r\n                            </View>\r\n                            <TouchableOpacity\r\n                                style={styles.delete}\r\n                                onPress={() => { deleteTask(item.ID) }}\r\n                            >\r\n                                <FontAwesome5\r\n                                    name={'trash'}\r\n                                    size={25}\r\n                                    color={'#ff3636'}\r\n                                />\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                )}\r\n                keyExtractor={(item, index) => index.toString()}\r\n            />\r\n            <TouchableOpacity\r\n                style={styles.button}\r\n                onPress={() => {\r\n                    dispatch(setTaskID(tasks.length + 1));\r\n                    navigation.navigate('Task');\r\n                }}\r\n            >\r\n                <FontAwesome5\r\n                    name={'plus'}\r\n                    size={20}\r\n                    color={'#ffffff'}\r\n                />\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    body: {\r\n        flex: 1\r\n    },\r\n    button: {\r\n        width: 60,\r\n        height: 60,\r\n        borderRadius: 30,\r\n        backgroundColor: '#0080ff',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        bottom: 10,\r\n        right: 10,\r\n        elevation: 5,\r\n    },\r\n    item_row: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    item_body: {\r\n        flex: 1,\r\n    },\r\n    delete: {\r\n        width: 50,\r\n        height: 50,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    item: {\r\n        marginHorizontal: 10,\r\n        marginVertical: 7,\r\n        paddingRight: 10,\r\n        backgroundColor: '#ffffff',\r\n        justifyContent: 'center',\r\n        borderRadius: 10,\r\n        elevation: 5,\r\n    },\r\n    title: {\r\n        color: '#000000',\r\n        fontSize: 30,\r\n        margin: 5,\r\n    },\r\n    subtitle: {\r\n        color: '#999999',\r\n        fontSize: 20,\r\n        margin: 5,\r\n    },\r\n    color: {\r\n        width: 20,\r\n        height: 100,\r\n        borderTopLeftRadius: 10,\r\n        borderBottomLeftRadius: 10,\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}