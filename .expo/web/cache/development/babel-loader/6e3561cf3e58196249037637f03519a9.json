{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport Intro from \"./app/screens/Intro\";\nimport NoteScreen from \"./app/screens/NoteScreen\";\nimport ToDo from \"./app/screens/ToDo\";\nimport NoteDetail from \"./app/components/NoteDetail\";\nimport NoteProvider from \"./app/contexts/NoteProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createMaterialTopTabNavigator();\nvar Stack = createStackNavigator();\nexport default function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAppFirstTimeOpen = _useState4[0],\n      setIsAppFirstTimeOpen = _useState4[1];\n\n  var findUser = function findUser() {\n    var result;\n    return _regeneratorRuntime.async(function findUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result === null)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setIsAppFirstTimeOpen(true));\n\n          case 5:\n            setUser(JSON.parse(result));\n            setIsAppFirstTimeOpen(false);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    findUser();\n  }, []);\n\n  var LoadNoteScreen = function LoadNoteScreen(props) {\n    return _jsx(NoteScreen, _objectSpread(_objectSpread({}, props), {}, {\n      user: user\n    }));\n  };\n\n  if (isAppFirstTimeOpen) return _jsx(Intro, {\n    onFinish: findUser\n  });\n\n  var MainApp = function MainApp() {\n    return _jsxs(Tab.Navigator, {\n      children: [_jsx(Tab.Screen, {\n        component: ToDo,\n        name: \"ToDo List\"\n      }), _jsx(Tab.Screen, {\n        component: LoadNoteScreen,\n        name: \"Memo\"\n      })]\n    });\n  };\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(NoteProvider, {\n      children: _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerTitle: '',\n          headerTransparent: true\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"MainApp\",\n          component: MainApp,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          component: NoteDetail,\n          name: \"NoteDetail\"\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["D:/ALPro/Smt 6/PAM/noteExpo/App.js"],"names":["AsyncStorage","StatusBar","React","useEffect","useState","createStackNavigator","NavigationContainer","createMaterialTopTabNavigator","Intro","NoteScreen","ToDo","NoteDetail","NoteProvider","Tab","Stack","App","user","setUser","isAppFirstTimeOpen","setIsAppFirstTimeOpen","findUser","getItem","result","JSON","parse","LoadNoteScreen","props","MainApp","headerTitle","headerTransparent","headerShown","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport Intro from './app/screens/Intro';\nimport NoteScreen from './app/screens/NoteScreen';\nimport ToDo from './app/screens/ToDo';\nimport NoteDetail from './app/components/NoteDetail';\nimport NoteProvider from './app/contexts/NoteProvider';\n\nconst Tab = createMaterialTopTabNavigator();\nconst Stack = createStackNavigator();\nexport default function App() {\n  const [user, setUser] = useState({});\n  const [isAppFirstTimeOpen, setIsAppFirstTimeOpen] = useState(false);\n  const findUser = async () => {\n    const result = await AsyncStorage.getItem('user');\n\n    if (result === null) return setIsAppFirstTimeOpen(true);\n\n    setUser(JSON.parse(result));\n    setIsAppFirstTimeOpen(false);\n  };\n\n  useEffect(() => {\n    findUser();\n  }, []);\n\n  const LoadNoteScreen = props => <NoteScreen {...props} user={user} />;\n\n  if (isAppFirstTimeOpen) return <Intro onFinish={findUser} />;\n\n\n  const MainApp = () => {\n    return (\n      <Tab.Navigator>\n      <Tab.Screen component={ToDo} name='ToDo List' />\n        <Tab.Screen component={LoadNoteScreen} name='Memo' />\n      </Tab.Navigator>\n    );\n  };\n\n  return (\n    <NavigationContainer>\n      <NoteProvider>\n        <Stack.Navigator\n          screenOptions={{ headerTitle: '', headerTransparent: true }}\n        >\n\n          <Stack.Screen name=\"MainApp\" component={MainApp} options={{ headerShown: false }} />\n          <Stack.Screen component={NoteDetail} name='NoteDetail' />\n        </Stack.Navigator>\n      </NoteProvider>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}