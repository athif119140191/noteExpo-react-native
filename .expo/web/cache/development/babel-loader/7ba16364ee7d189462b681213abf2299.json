{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar NoteContext = createContext();\n\nvar NoteProvider = function NoteProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      notes = _useState2[0],\n      setNotes = _useState2[1];\n\n  var findNotes = function findNotes() {\n    var result;\n    return _regeneratorRuntime.async(function findNotes$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('notes'));\n\n          case 2:\n            result = _context.sent;\n            if (result !== null) setNotes(JSON.parse(result));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    findNotes();\n  }, []);\n  return _jsx(NoteContext.Provider, {\n    value: {\n      notes: notes,\n      setNotes: setNotes,\n      findNotes: findNotes\n    },\n    children: children\n  });\n};\n\nexport var useNotes = function useNotes() {\n  return useContext(NoteContext);\n};\nexport default NoteProvider;","map":{"version":3,"sources":["D:/ALPro/Smt 6/PAM/noteExpo/app/contexts/NoteProvider.js"],"names":["AsyncStorage","React","createContext","useContext","useEffect","useState","NoteContext","NoteProvider","children","notes","setNotes","findNotes","getItem","result","JSON","parse","useNotes"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;;AAEA,IAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AACA,IAAMK,YAAY,GAAG,SAAfA,YAAe,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACrC,kBAA0BH,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACKX,YAAY,CAACY,OAAb,CAAqB,OAArB,CADL;;AAAA;AACVC,YAAAA,MADU;AAEhB,gBAAIA,MAAM,KAAK,IAAf,EAAqBH,QAAQ,CAACI,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAD,CAAR;;AAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKAT,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEF,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,QAAQ,EAARA,QAAT;AAAmBC,MAAAA,SAAS,EAATA;AAAnB,KAA7B;AAAA,cACGH;AADH,IADF;AAKD,CAjBD;;AAmBA,OAAO,IAAMQ,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAMb,UAAU,CAACG,WAAD,CAAhB;AAAA,CAAjB;AAEP,eAAeC,YAAf","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst NoteContext = createContext();\r\nconst NoteProvider = ({ children }) => {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  const findNotes = async () => {\r\n    const result = await AsyncStorage.getItem('notes');\r\n    if (result !== null) setNotes(JSON.parse(result));\r\n  };\r\n\r\n  useEffect(() => {\r\n    findNotes();\r\n  }, []);\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, setNotes, findNotes }}>\r\n      {children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotes = () => useContext(NoteContext);\r\n\r\nexport default NoteProvider;"]},"metadata":{},"sourceType":"module"}