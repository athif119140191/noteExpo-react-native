{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Note from \"../components/Note\";\nimport NoteInputModal from \"../components/NoteInputModal\";\nimport NotFound from \"../components/NotFound\";\nimport RoundIconBtn from \"../components/RoundIconBtn\";\nimport SearchBar from \"../components/SearchBar\";\nimport { useNotes } from \"../contexts/NoteProvider\";\nimport colors from \"../misc/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar reverseData = function reverseData(data) {\n  return data.sort(function (a, b) {\n    var aInt = parseInt(a.time);\n    var bInt = parseInt(b.time);\n    if (aInt < bInt) return 1;\n    if (aInt == bInt) return 0;\n    if (aInt > bInt) return -1;\n  });\n};\n\nvar NoteScreen = function NoteScreen(_ref) {\n  var user = _ref.user,\n      navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      greet = _useState2[0],\n      setGreet = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchQuery = _useState6[0],\n      setSearchQuery = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      resultNotFound = _useState8[0],\n      setResultNotFound = _useState8[1];\n\n  var _useNotes = useNotes(),\n      notes = _useNotes.notes,\n      setNotes = _useNotes.setNotes,\n      findNotes = _useNotes.findNotes;\n\n  var findGreet = function findGreet() {\n    var hrs = new Date().getHours();\n    if (hrs === 0 || hrs < 12) return setGreet('Morning');\n    if (hrs === 1 || hrs < 17) return setGreet('Afternoon');\n    setGreet('Evening');\n  };\n\n  useEffect(function () {\n    findGreet();\n  }, []);\n  var reverseNotes = reverseData(notes);\n\n  var handleOnSubmit = function handleOnSubmit(title, desc) {\n    var note, updatedNotes;\n    return _regeneratorRuntime.async(function handleOnSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            note = {\n              id: Date.now(),\n              title: title,\n              desc: desc,\n              time: Date.now()\n            };\n            updatedNotes = [].concat(_toConsumableArray(notes), [note]);\n            setNotes(updatedNotes);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('notes', JSON.stringify(updatedNotes)));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openNote = function openNote(note) {\n    navigation.navigate('NoteDetail', {\n      note: note\n    });\n  };\n\n  var handleOnSearchInput = function handleOnSearchInput(text) {\n    var filteredNotes;\n    return _regeneratorRuntime.async(function handleOnSearchInput$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setSearchQuery(text);\n\n            if (text.trim()) {\n              _context2.next = 7;\n              break;\n            }\n\n            setSearchQuery('');\n            setResultNotFound(false);\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(findNotes());\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n            filteredNotes = notes.filter(function (note) {\n              if (note.title.toLowerCase().includes(text.toLowerCase())) {\n                return note;\n              }\n            });\n\n            if (filteredNotes.length) {\n              setNotes(_toConsumableArray(filteredNotes));\n            } else {\n              setResultNotFound(true);\n            }\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleOnClear = function handleOnClear() {\n    return _regeneratorRuntime.async(function handleOnClear$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setSearchQuery('');\n            setResultNotFound(false);\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(findNotes());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      backgroundColor: colors.LIGHT\n    }), _jsx(TouchableWithoutFeedback, {\n      onPress: Keyboard.dismiss,\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Text, {\n          style: styles.header,\n          children: \"Good \" + greet + \" \" + user.name\n        }), notes.length ? _jsx(SearchBar, {\n          value: searchQuery,\n          onChangeText: handleOnSearchInput,\n          containerStyle: {\n            marginVertical: 15\n          },\n          onClear: handleOnClear\n        }) : null, resultNotFound ? _jsx(NotFound, {}) : _jsx(FlatList, {\n          data: reverseNotes,\n          numColumns: 2,\n          columnWrapperStyle: {\n            justifyContent: 'space-between',\n            marginBottom: 15\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item.id.toString();\n          },\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(Note, {\n              onPress: function onPress() {\n                return openNote(item);\n              },\n              item: item\n            });\n          }\n        }), !notes.length ? _jsx(View, {\n          style: [StyleSheet.absoluteFillObject, styles.emptyHeaderContainer],\n          children: _jsx(Text, {\n            style: styles.emptyHeader,\n            children: \"Add Notes\"\n          })\n        }) : null]\n      })\n    }), _jsx(RoundIconBtn, {\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      antIconName: \"plus\",\n      style: styles.addBtn\n    }), _jsx(NoteInputModal, {\n      visible: modalVisible,\n      onClose: function onClose() {\n        return setModalVisible(false);\n      },\n      onSubmit: handleOnSubmit\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  header: {\n    fontSize: 25,\n    fontWeight: 'bold'\n  },\n  container: {\n    paddingHorizontal: 20,\n    flex: 1,\n    zIndex: 1\n  },\n  emptyHeader: {\n    fontSize: 30,\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    opacity: 0.2\n  },\n  emptyHeaderContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: -1\n  },\n  addBtn: {\n    position: 'absolute',\n    right: 15,\n    bottom: 50,\n    zIndex: 1\n  }\n});\nexport default NoteScreen;","map":{"version":3,"sources":["D:/ALPro/Smt 6/PAM/noteExpo/app/screens/NoteScreen.js"],"names":["AsyncStorage","React","useEffect","useState","Note","NoteInputModal","NotFound","RoundIconBtn","SearchBar","useNotes","colors","reverseData","data","sort","a","b","aInt","parseInt","time","bInt","NoteScreen","user","navigation","greet","setGreet","modalVisible","setModalVisible","searchQuery","setSearchQuery","resultNotFound","setResultNotFound","notes","setNotes","findNotes","findGreet","hrs","Date","getHours","reverseNotes","handleOnSubmit","title","desc","note","id","now","updatedNotes","setItem","JSON","stringify","openNote","navigate","handleOnSearchInput","text","trim","filteredNotes","filter","toLowerCase","includes","length","handleOnClear","LIGHT","Keyboard","dismiss","styles","container","header","name","marginVertical","justifyContent","marginBottom","item","toString","StyleSheet","absoluteFillObject","emptyHeaderContainer","emptyHeader","addBtn","create","fontSize","fontWeight","paddingHorizontal","flex","zIndex","textTransform","opacity","alignItems","position","right","bottom"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  StatusBar,\r\n  TouchableWithoutFeedback,\r\n  Keyboard,\r\n  FlatList,\r\n} from 'react-native';\r\nimport Note from '../components/Note';\r\nimport NoteInputModal from '../components/NoteInputModal';\r\nimport NotFound from '../components/NotFound';\r\nimport RoundIconBtn from '../components/RoundIconBtn';\r\nimport SearchBar from '../components/SearchBar';\r\nimport { useNotes } from '../contexts/NoteProvider';\r\nimport colors from '../misc/colors';\r\n\r\nconst reverseData = data => {\r\n  return data.sort((a, b) => {\r\n    const aInt = parseInt(a.time);\r\n    const bInt = parseInt(b.time);\r\n    if (aInt < bInt) return 1;\r\n    if (aInt == bInt) return 0;\r\n    if (aInt > bInt) return -1;\r\n  });\r\n};\r\n\r\nconst NoteScreen = ({ user, navigation }) => {\r\n  const [greet, setGreet] = useState('');\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [resultNotFound, setResultNotFound] = useState(false);\r\n\r\n  const { notes, setNotes, findNotes } = useNotes();\r\n\r\n  const findGreet = () => {\r\n    const hrs = new Date().getHours();\r\n    if (hrs === 0 || hrs < 12) return setGreet('Morning');\r\n    if (hrs === 1 || hrs < 17) return setGreet('Afternoon');\r\n    setGreet('Evening');\r\n  };\r\n\r\n  useEffect(() => {\r\n    findGreet();\r\n  }, []);\r\n\r\n  const reverseNotes = reverseData(notes);\r\n\r\n  const handleOnSubmit = async (title, desc) => {\r\n    const note = { id: Date.now(), title, desc, time: Date.now() };\r\n    const updatedNotes = [...notes, note];\r\n    setNotes(updatedNotes);\r\n    await AsyncStorage.setItem('notes', JSON.stringify(updatedNotes));\r\n  };\r\n\r\n  const openNote = note => {\r\n    navigation.navigate('NoteDetail', { note });\r\n  };\r\n\r\n  const handleOnSearchInput = async text => {\r\n    setSearchQuery(text);\r\n    if (!text.trim()) {\r\n      setSearchQuery('');\r\n      setResultNotFound(false);\r\n      return await findNotes();\r\n    }\r\n    const filteredNotes = notes.filter(note => {\r\n      if (note.title.toLowerCase().includes(text.toLowerCase())) {\r\n        return note;\r\n      }\r\n    });\r\n\r\n    if (filteredNotes.length) {\r\n      setNotes([...filteredNotes]);\r\n    } else {\r\n      setResultNotFound(true);\r\n    }\r\n  };\r\n\r\n  const handleOnClear = async () => {\r\n    setSearchQuery('');\r\n    setResultNotFound(false);\r\n    await findNotes();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StatusBar barStyle='dark-content' backgroundColor={colors.LIGHT} />\r\n      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n        <View style={styles.container}>\r\n          <Text style={styles.header}>{`Good ${greet} ${user.name}`}</Text>\r\n          {notes.length ? (\r\n            <SearchBar\r\n              value={searchQuery}\r\n              onChangeText={handleOnSearchInput}\r\n              containerStyle={{ marginVertical: 15 }}\r\n              onClear={handleOnClear}\r\n            />\r\n          ) : null}\r\n\r\n          {resultNotFound ? (\r\n            <NotFound />\r\n          ) : (\r\n            <FlatList\r\n              data={reverseNotes}\r\n              numColumns={2}\r\n              columnWrapperStyle={{\r\n                justifyContent: 'space-between',\r\n                marginBottom: 15,\r\n              }}\r\n              keyExtractor={item => item.id.toString()}\r\n              renderItem={({ item }) => (\r\n                <Note onPress={() => openNote(item)} item={item} />\r\n              )}\r\n            />\r\n          )}\r\n\r\n          {!notes.length ? (\r\n            <View\r\n              style={[\r\n                StyleSheet.absoluteFillObject,\r\n                styles.emptyHeaderContainer,\r\n              ]}\r\n            >\r\n              <Text style={styles.emptyHeader}>Add Notes</Text>\r\n            </View>\r\n          ) : null}\r\n        </View>\r\n      </TouchableWithoutFeedback>\r\n      <RoundIconBtn\r\n        onPress={() => setModalVisible(true)}\r\n        antIconName='plus'\r\n        style={styles.addBtn}\r\n      />\r\n      <NoteInputModal\r\n        visible={modalVisible}\r\n        onClose={() => setModalVisible(false)}\r\n        onSubmit={handleOnSubmit}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    fontSize: 25,\r\n    fontWeight: 'bold',\r\n  },\r\n  container: {\r\n    paddingHorizontal: 20,\r\n    flex: 1,\r\n    zIndex: 1,\r\n  },\r\n  emptyHeader: {\r\n    fontSize: 30,\r\n    textTransform: 'uppercase',\r\n    fontWeight: 'bold',\r\n    opacity: 0.2,\r\n  },\r\n  emptyHeaderContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: -1,\r\n  },\r\n  addBtn: {\r\n    position: 'absolute',\r\n    right: 15,\r\n    bottom: 50,\r\n    zIndex: 1,\r\n  },\r\n});\r\n\r\nexport default NoteScreen;"]},"metadata":{},"sourceType":"module"}